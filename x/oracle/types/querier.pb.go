// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/v1beta/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryClaimRequest struct {
	ClaimHash github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=claim_hash,json=claimHash,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"claim_hash,omitempty"`
}

func (m *QueryClaimRequest) Reset()         { *m = QueryClaimRequest{} }
func (m *QueryClaimRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClaimRequest) ProtoMessage()    {}
func (*QueryClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18edc48ded26bce, []int{0}
}
func (m *QueryClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimRequest.Merge(m, src)
}
func (m *QueryClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimRequest proto.InternalMessageInfo

func (m *QueryClaimRequest) GetClaimHash() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

// QueryClaimResponse is the response type for the Query/Claim RPC method.
type QueryClaimResponse struct {
	// claim returns the requested evidence.
	Claim *types.Any `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (m *QueryClaimResponse) Reset()         { *m = QueryClaimResponse{} }
func (m *QueryClaimResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClaimResponse) ProtoMessage()    {}
func (*QueryClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18edc48ded26bce, []int{1}
}
func (m *QueryClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimResponse.Merge(m, src)
}
func (m *QueryClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimResponse proto.InternalMessageInfo

func (m *QueryClaimResponse) GetClaim() *types.Any {
	if m != nil {
		return m.Claim
	}
	return nil
}

// this line is used by starport scaffolding # 3
type QueryAllClaimRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimRequest) Reset()         { *m = QueryAllClaimRequest{} }
func (m *QueryAllClaimRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimRequest) ProtoMessage()    {}
func (*QueryAllClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18edc48ded26bce, []int{2}
}
func (m *QueryAllClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimRequest.Merge(m, src)
}
func (m *QueryAllClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimRequest proto.InternalMessageInfo

func (m *QueryAllClaimRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllClaimResponse struct {
	Claim      []*types.Any        `protobuf:"bytes,1,rep,name=claim,proto3" json:"claim,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimResponse) Reset()         { *m = QueryAllClaimResponse{} }
func (m *QueryAllClaimResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimResponse) ProtoMessage()    {}
func (*QueryAllClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18edc48ded26bce, []int{3}
}
func (m *QueryAllClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimResponse.Merge(m, src)
}
func (m *QueryAllClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimResponse proto.InternalMessageInfo

func (m *QueryAllClaimResponse) GetClaim() []*types.Any {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *QueryAllClaimResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryClaimRequest)(nil), "r3l.oracle.v1beta1.QueryClaimRequest")
	proto.RegisterType((*QueryClaimResponse)(nil), "r3l.oracle.v1beta1.QueryClaimResponse")
	proto.RegisterType((*QueryAllClaimRequest)(nil), "r3l.oracle.v1beta1.QueryAllClaimRequest")
	proto.RegisterType((*QueryAllClaimResponse)(nil), "r3l.oracle.v1beta1.QueryAllClaimResponse")
}

func init() { proto.RegisterFile("oracle/v1beta/querier.proto", fileDescriptor_d18edc48ded26bce) }

var fileDescriptor_d18edc48ded26bce = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x8b, 0x13, 0x31,
	0x14, 0xc6, 0x3b, 0x95, 0x8a, 0x46, 0x2f, 0x86, 0x0a, 0x6e, 0x57, 0x46, 0x1d, 0xb0, 0xd6, 0x05,
	0x13, 0xbb, 0xf5, 0xe0, 0xd1, 0xad, 0xa0, 0x8b, 0x27, 0xed, 0x45, 0xf0, 0xa0, 0x64, 0xc6, 0xe7,
	0x34, 0x90, 0x49, 0x66, 0x93, 0xcc, 0xb2, 0x83, 0x78, 0xf1, 0x2c, 0x28, 0xe8, 0x1f, 0xe5, 0x71,
	0xc1, 0x8b, 0x27, 0x91, 0xd6, 0xbf, 0xc2, 0x93, 0x4c, 0x32, 0x65, 0x67, 0x5c, 0x4b, 0xbd, 0xbd,
	0x4c, 0xbe, 0xf7, 0xbe, 0x5f, 0xbe, 0x79, 0x68, 0x5b, 0x69, 0x96, 0x08, 0xa0, 0x87, 0xe3, 0x18,
	0x2c, 0xa3, 0x07, 0x05, 0x68, 0x0e, 0x9a, 0xe4, 0x5a, 0x59, 0x85, 0xb1, 0x9e, 0x08, 0xe2, 0x05,
	0xc4, 0x0b, 0xc6, 0x83, 0x9d, 0x44, 0x99, 0x4c, 0x19, 0x1a, 0x33, 0x03, 0x4e, 0x5e, 0xd6, 0xbd,
	0x63, 0x9a, 0xb3, 0x94, 0x4b, 0x66, 0xb9, 0x92, 0xbe, 0x7f, 0xd0, 0x4f, 0x55, 0xaa, 0x5c, 0x49,
	0xab, 0xaa, 0xfe, 0xba, 0x95, 0x2a, 0x95, 0x0a, 0xa0, 0xee, 0x14, 0x17, 0x6f, 0x28, 0x93, 0x65,
	0x7d, 0x75, 0xb5, 0xbe, 0x62, 0x39, 0xa7, 0x4c, 0x4a, 0x65, 0xdd, 0x34, 0xe3, 0x6f, 0x23, 0x81,
	0x2e, 0x3d, 0xab, 0x0c, 0x1f, 0x0a, 0xc6, 0xb3, 0x19, 0x1c, 0x14, 0x60, 0x2c, 0x7e, 0x8e, 0x50,
	0x52, 0x9d, 0x5f, 0xcd, 0x99, 0x99, 0x5f, 0x09, 0xae, 0x07, 0xa3, 0x8b, 0xd3, 0xfb, 0xbf, 0x7f,
	0x5c, 0xbb, 0x97, 0x72, 0x3b, 0x2f, 0x62, 0x92, 0xa8, 0x8c, 0x5a, 0x90, 0xaf, 0x41, 0x67, 0x5c,
	0xda, 0x66, 0x29, 0x78, 0x6c, 0x68, 0x5c, 0x5a, 0x30, 0x64, 0x1f, 0x8e, 0xa6, 0x55, 0x31, 0x3b,
	0xef, 0x66, 0xed, 0x33, 0x33, 0x8f, 0x1e, 0x20, 0xdc, 0x74, 0x33, 0xb9, 0x92, 0x06, 0xf0, 0x0e,
	0xea, 0x39, 0x89, 0x73, 0xba, 0xb0, 0xdb, 0x27, 0x9e, 0x98, 0xac, 0x1e, 0x43, 0xf6, 0x64, 0x39,
	0xf3, 0x92, 0xe8, 0x25, 0xea, 0xbb, 0x09, 0x7b, 0x42, 0xb4, 0x90, 0x1f, 0x21, 0x74, 0x12, 0x55,
	0x3d, 0x68, 0x48, 0x7c, 0xae, 0xa4, 0xca, 0x95, 0xb8, 0x5c, 0x57, 0x91, 0x93, 0xa7, 0x2c, 0x85,
	0xba, 0x77, 0xd6, 0xe8, 0x8c, 0x3e, 0x04, 0xe8, 0xf2, 0x5f, 0x06, 0xa7, 0x29, 0xcf, 0x6c, 0xa0,
	0xc4, 0x8f, 0x5b, 0x34, 0x5d, 0x47, 0x73, 0x6b, 0x23, 0x8d, 0x37, 0x6a, 0xe2, 0xec, 0x7e, 0xe9,
	0xa2, 0x9e, 0xc3, 0xc1, 0x1f, 0x03, 0x74, 0x6e, 0xc5, 0x84, 0x47, 0xe4, 0xf4, 0x16, 0x91, 0x7f,
	0xe5, 0x32, 0xb8, 0xfd, 0x1f, 0x4a, 0xef, 0x1b, 0x91, 0xf7, 0xdf, 0x7e, 0x7d, 0xee, 0x8e, 0xf0,
	0x90, 0xea, 0x89, 0xa0, 0xad, 0x1d, 0x1e, 0x53, 0xf7, 0x2e, 0xfa, 0xf6, 0x64, 0x2d, 0xde, 0xe1,
	0x12, 0xf5, 0x3c, 0xcd, 0xcd, 0xb5, 0x1e, 0x2d, 0x94, 0xe1, 0x26, 0x59, 0xcd, 0x71, 0xc3, 0x71,
	0x6c, 0xe3, 0xad, 0xb5, 0x1c, 0xd3, 0x27, 0x5f, 0x17, 0x61, 0x70, 0xbc, 0x08, 0x83, 0x9f, 0x8b,
	0x30, 0xf8, 0xb4, 0x0c, 0x3b, 0xc7, 0xcb, 0xb0, 0xf3, 0x7d, 0x19, 0x76, 0x5e, 0xdc, 0x6d, 0xac,
	0xa8, 0x06, 0x01, 0x87, 0x4c, 0xda, 0x3b, 0x89, 0xca, 0xb2, 0x42, 0x72, 0x5b, 0xba, 0x89, 0x47,
	0xab, 0x99, 0xb6, 0xcc, 0xc1, 0xc4, 0x67, 0xdd, 0x0f, 0x9c, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x19, 0x0e, 0xec, 0xb6, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	AllClaim(ctx context.Context, in *QueryAllClaimRequest, opts ...grpc.CallOption) (*QueryAllClaimResponse, error)
	// Evidence queries evidence based on evidence hash.
	Claim(ctx context.Context, in *QueryClaimRequest, opts ...grpc.CallOption) (*QueryClaimResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllClaim(ctx context.Context, in *QueryAllClaimRequest, opts ...grpc.CallOption) (*QueryAllClaimResponse, error) {
	out := new(QueryAllClaimResponse)
	err := c.cc.Invoke(ctx, "/r3l.oracle.v1beta1.Query/AllClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Claim(ctx context.Context, in *QueryClaimRequest, opts ...grpc.CallOption) (*QueryClaimResponse, error) {
	out := new(QueryClaimResponse)
	err := c.cc.Invoke(ctx, "/r3l.oracle.v1beta1.Query/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	AllClaim(context.Context, *QueryAllClaimRequest) (*QueryAllClaimResponse, error)
	// Evidence queries evidence based on evidence hash.
	Claim(context.Context, *QueryClaimRequest) (*QueryClaimResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllClaim(ctx context.Context, req *QueryAllClaimRequest) (*QueryAllClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllClaim not implemented")
}
func (*UnimplementedQueryServer) Claim(ctx context.Context, req *QueryClaimRequest) (*QueryClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/r3l.oracle.v1beta1.Query/AllClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllClaim(ctx, req.(*QueryAllClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/r3l.oracle.v1beta1.Query/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Claim(ctx, req.(*QueryClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "r3l.oracle.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllClaim",
			Handler:    _Query_AllClaim_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _Query_Claim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/v1beta/querier.proto",
}

func (m *QueryClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claim) > 0 {
		for iNdEx := len(m.Claim) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claim[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Claim) > 0 {
		for _, e := range m.Claim {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.Any{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claim = append(m.Claim, &types.Any{})
			if err := m.Claim[len(m.Claim)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
