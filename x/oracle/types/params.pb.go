// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/v1beta/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params represents the parameters used for by the slashing module.
type Params struct {
	ClaimParams   []ClaimParams                          `protobuf:"bytes,1,rep,name=claim_params,json=claimParams,proto3" json:"claim_params" yaml:"claim_params"`
	VoteThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=vote_threshold,json=voteThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"vote_threshold" yaml:"vote_threshold"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_184dfb2eed907d32, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetClaimParams() []ClaimParams {
	if m != nil {
		return m.ClaimParams
	}
	return nil
}

// ClaimParams is the parameters set for each oracle claim type
type ClaimParams struct {
	VotePeriod int64  `protobuf:"varint,1,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty" yaml:"vote_period"`
	ClaimType  string `protobuf:"bytes,2,opt,name=claim_type,json=claimType,proto3" json:"claim_type,omitempty" yaml:"claim_type"`
	Prevote    bool   `protobuf:"varint,3,opt,name=prevote,proto3" json:"prevote,omitempty" yaml:"prevote"`
}

func (m *ClaimParams) Reset()         { *m = ClaimParams{} }
func (m *ClaimParams) String() string { return proto.CompactTextString(m) }
func (*ClaimParams) ProtoMessage()    {}
func (*ClaimParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_184dfb2eed907d32, []int{1}
}
func (m *ClaimParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimParams.Merge(m, src)
}
func (m *ClaimParams) XXX_Size() int {
	return m.Size()
}
func (m *ClaimParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimParams.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimParams proto.InternalMessageInfo

func (m *ClaimParams) GetVotePeriod() int64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *ClaimParams) GetClaimType() string {
	if m != nil {
		return m.ClaimType
	}
	return ""
}

func (m *ClaimParams) GetPrevote() bool {
	if m != nil {
		return m.Prevote
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "r3l.oracle.v1beta1.Params")
	proto.RegisterType((*ClaimParams)(nil), "r3l.oracle.v1beta1.ClaimParams")
}

func init() { proto.RegisterFile("oracle/v1beta/params.proto", fileDescriptor_184dfb2eed907d32) }

var fileDescriptor_184dfb2eed907d32 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcf, 0x6a, 0xdb, 0x30,
	0x18, 0xb7, 0x16, 0xc8, 0x16, 0x39, 0x0b, 0x4c, 0x5b, 0x86, 0xc9, 0xc0, 0x32, 0x3e, 0x0c, 0x1f,
	0x16, 0x6b, 0x59, 0x06, 0x83, 0x1d, 0xbd, 0xc1, 0x6e, 0x23, 0x98, 0x9c, 0x76, 0x09, 0x8e, 0x23,
	0x12, 0x33, 0x3b, 0x32, 0xb2, 0x12, 0xe6, 0xb7, 0xd8, 0x63, 0x94, 0x3e, 0x49, 0x8e, 0x39, 0xb6,
	0x3d, 0x98, 0xe2, 0xbc, 0x81, 0x9f, 0xa0, 0x48, 0x4a, 0x5b, 0x97, 0x9e, 0xa4, 0x9f, 0x7e, 0x7f,
	0xf4, 0x7d, 0x9f, 0x04, 0x47, 0x8c, 0x47, 0x71, 0x4a, 0xc9, 0x7e, 0xb2, 0xa4, 0x22, 0x22, 0x79,
	0xc4, 0xa3, 0xac, 0xf0, 0x73, 0xce, 0x04, 0x43, 0x88, 0x4f, 0x53, 0x5f, 0xf3, 0xbe, 0xe6, 0x27,
	0xa3, 0x77, 0x6b, 0xb6, 0x66, 0x8a, 0x26, 0x72, 0xa7, 0x95, 0xee, 0x35, 0x80, 0xdd, 0x99, 0xb2,
	0xa2, 0x05, 0xec, 0xc7, 0x69, 0x94, 0x64, 0x0b, 0x1d, 0x65, 0x01, 0xa7, 0xe3, 0x99, 0x5f, 0xb0,
	0xff, 0x3c, 0xcb, 0xff, 0x21, 0x75, 0xda, 0x16, 0x7c, 0x38, 0x54, 0xd8, 0x68, 0x2a, 0xfc, 0xb6,
	0x8c, 0xb2, 0xf4, 0xbb, 0xdb, 0x8e, 0x70, 0x43, 0x33, 0x7e, 0x54, 0xa2, 0x2d, 0x1c, 0xec, 0x99,
	0xa0, 0x0b, 0xb1, 0xe1, 0xb4, 0xd8, 0xb0, 0x74, 0x65, 0xbd, 0x70, 0x80, 0xd7, 0x0f, 0x7e, 0xc9,
	0x84, 0x9b, 0x0a, 0x7f, 0x5c, 0x27, 0x62, 0xb3, 0x5b, 0xfa, 0x31, 0xcb, 0x48, 0xcc, 0x8a, 0x8c,
	0x15, 0xe7, 0x65, 0x5c, 0xac, 0xfe, 0x12, 0x51, 0xe6, 0xb4, 0xf0, 0x7f, 0xd2, 0xb8, 0xa9, 0xf0,
	0x50, 0xdf, 0xf5, 0x34, 0xcd, 0x0d, 0x5f, 0xcb, 0x83, 0xf9, 0x03, 0xbe, 0x04, 0xd0, 0x6c, 0x55,
	0x8a, 0xbe, 0x41, 0x53, 0x39, 0x72, 0xca, 0x13, 0xb6, 0xb2, 0x80, 0x03, 0xbc, 0x4e, 0xf0, 0xbe,
	0xa9, 0x30, 0x6a, 0xc5, 0x69, 0xd2, 0x0d, 0xa1, 0x44, 0x33, 0x05, 0xd0, 0x57, 0x08, 0x75, 0x5b,
	0xb2, 0x06, 0x55, 0x74, 0x2f, 0x18, 0x36, 0x15, 0x7e, 0xd3, 0x6e, 0x59, 0x72, 0x6e, 0xd8, 0x53,
	0x60, 0x5e, 0xe6, 0x14, 0x7d, 0x82, 0x2f, 0x73, 0x4e, 0x65, 0x8c, 0xd5, 0x71, 0x80, 0xf7, 0x2a,
	0x40, 0x4d, 0x85, 0x07, 0xda, 0x72, 0x26, 0xdc, 0xf0, 0x5e, 0x12, 0xfc, 0xbe, 0xa8, 0x6d, 0x70,
	0xa8, 0x6d, 0x70, 0xac, 0x6d, 0x70, 0x5b, 0xdb, 0xe0, 0xff, 0xc9, 0x36, 0x8e, 0x27, 0xdb, 0xb8,
	0x3a, 0xd9, 0xc6, 0x9f, 0xcf, 0xad, 0xd1, 0x70, 0x9a, 0xd2, 0x7d, 0xb4, 0x15, 0xe3, 0x98, 0x65,
	0xd9, 0x6e, 0x9b, 0x88, 0x92, 0xf0, 0x69, 0x4a, 0xfe, 0x91, 0xf3, 0x87, 0x50, 0x83, 0x5a, 0x76,
	0xd5, 0xfb, 0x4e, 0xef, 0x02, 0x00, 0x00, 0xff, 0xff, 0x96, 0xe9, 0xfc, 0x26, 0x27, 0x02, 0x00,
	0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ClaimParams) != len(that1.ClaimParams) {
		return false
	}
	for i := range this.ClaimParams {
		if !this.ClaimParams[i].Equal(&that1.ClaimParams[i]) {
			return false
		}
	}
	if !this.VoteThreshold.Equal(that1.VoteThreshold) {
		return false
	}
	return true
}
func (this *ClaimParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimParams)
	if !ok {
		that2, ok := that.(ClaimParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VotePeriod != that1.VotePeriod {
		return false
	}
	if this.ClaimType != that1.ClaimType {
		return false
	}
	if this.Prevote != that1.Prevote {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VoteThreshold.Size()
		i -= size
		if _, err := m.VoteThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ClaimParams) > 0 {
		for iNdEx := len(m.ClaimParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Prevote {
		i--
		if m.Prevote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClaimType) > 0 {
		i -= len(m.ClaimType)
		copy(dAtA[i:], m.ClaimType)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ClaimType)))
		i--
		dAtA[i] = 0x12
	}
	if m.VotePeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimParams) > 0 {
		for _, e := range m.ClaimParams {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.VoteThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *ClaimParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotePeriod != 0 {
		n += 1 + sovParams(uint64(m.VotePeriod))
	}
	l = len(m.ClaimType)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Prevote {
		n += 2
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimParams = append(m.ClaimParams, ClaimParams{})
			if err := m.ClaimParams[len(m.ClaimParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteThreshold", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prevote = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
