// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: r3l/v1beta/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryAllRankSourceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRankSourceRequest) Reset()         { *m = QueryAllRankSourceRequest{} }
func (m *QueryAllRankSourceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRankSourceRequest) ProtoMessage()    {}
func (*QueryAllRankSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{0}
}
func (m *QueryAllRankSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRankSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRankSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRankSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRankSourceRequest.Merge(m, src)
}
func (m *QueryAllRankSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRankSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRankSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRankSourceRequest proto.InternalMessageInfo

func (m *QueryAllRankSourceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRankSourceResponse struct {
	RankSource []*MsgRankSource    `protobuf:"bytes,1,rep,name=rankSource,proto3" json:"rankSource,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRankSourceResponse) Reset()         { *m = QueryAllRankSourceResponse{} }
func (m *QueryAllRankSourceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRankSourceResponse) ProtoMessage()    {}
func (*QueryAllRankSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{1}
}
func (m *QueryAllRankSourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRankSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRankSourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRankSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRankSourceResponse.Merge(m, src)
}
func (m *QueryAllRankSourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRankSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRankSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRankSourceResponse proto.InternalMessageInfo

func (m *QueryAllRankSourceResponse) GetRankSource() []*MsgRankSource {
	if m != nil {
		return m.RankSource
	}
	return nil
}

func (m *QueryAllRankSourceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNamespaceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNamespaceRequest) Reset()         { *m = QueryAllNamespaceRequest{} }
func (m *QueryAllNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNamespaceRequest) ProtoMessage()    {}
func (*QueryAllNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{2}
}
func (m *QueryAllNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNamespaceRequest.Merge(m, src)
}
func (m *QueryAllNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNamespaceRequest proto.InternalMessageInfo

func (m *QueryAllNamespaceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNamespaceResponse struct {
	Namespace  []*MsgNamespace     `protobuf:"bytes,1,rep,name=namespace,proto3" json:"namespace,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNamespaceResponse) Reset()         { *m = QueryAllNamespaceResponse{} }
func (m *QueryAllNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNamespaceResponse) ProtoMessage()    {}
func (*QueryAllNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{3}
}
func (m *QueryAllNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNamespaceResponse.Merge(m, src)
}
func (m *QueryAllNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNamespaceResponse proto.InternalMessageInfo

func (m *QueryAllNamespaceResponse) GetNamespace() []*MsgNamespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *QueryAllNamespaceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllScoreRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScoreRequest) Reset()         { *m = QueryAllScoreRequest{} }
func (m *QueryAllScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllScoreRequest) ProtoMessage()    {}
func (*QueryAllScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{4}
}
func (m *QueryAllScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScoreRequest.Merge(m, src)
}
func (m *QueryAllScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScoreRequest proto.InternalMessageInfo

func (m *QueryAllScoreRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllScoreResponse struct {
	Score      []*MsgScore         `protobuf:"bytes,1,rep,name=score,proto3" json:"score,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScoreResponse) Reset()         { *m = QueryAllScoreResponse{} }
func (m *QueryAllScoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllScoreResponse) ProtoMessage()    {}
func (*QueryAllScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{5}
}
func (m *QueryAllScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScoreResponse.Merge(m, src)
}
func (m *QueryAllScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScoreResponse proto.InternalMessageInfo

func (m *QueryAllScoreResponse) GetScore() []*MsgScore {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *QueryAllScoreResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoteRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteRequest) Reset()         { *m = QueryAllVoteRequest{} }
func (m *QueryAllVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteRequest) ProtoMessage()    {}
func (*QueryAllVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{6}
}
func (m *QueryAllVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteRequest.Merge(m, src)
}
func (m *QueryAllVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteRequest proto.InternalMessageInfo

func (m *QueryAllVoteRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoteResponse struct {
	Vote       []*MsgVote          `protobuf:"bytes,1,rep,name=vote,proto3" json:"vote,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteResponse) Reset()         { *m = QueryAllVoteResponse{} }
func (m *QueryAllVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteResponse) ProtoMessage()    {}
func (*QueryAllVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3e27884096409a, []int{7}
}
func (m *QueryAllVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteResponse.Merge(m, src)
}
func (m *QueryAllVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteResponse proto.InternalMessageInfo

func (m *QueryAllVoteResponse) GetVote() []*MsgVote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *QueryAllVoteResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAllRankSourceRequest)(nil), "r3l.r3l.v1beta1.QueryAllRankSourceRequest")
	proto.RegisterType((*QueryAllRankSourceResponse)(nil), "r3l.r3l.v1beta1.QueryAllRankSourceResponse")
	proto.RegisterType((*QueryAllNamespaceRequest)(nil), "r3l.r3l.v1beta1.QueryAllNamespaceRequest")
	proto.RegisterType((*QueryAllNamespaceResponse)(nil), "r3l.r3l.v1beta1.QueryAllNamespaceResponse")
	proto.RegisterType((*QueryAllScoreRequest)(nil), "r3l.r3l.v1beta1.QueryAllScoreRequest")
	proto.RegisterType((*QueryAllScoreResponse)(nil), "r3l.r3l.v1beta1.QueryAllScoreResponse")
	proto.RegisterType((*QueryAllVoteRequest)(nil), "r3l.r3l.v1beta1.QueryAllVoteRequest")
	proto.RegisterType((*QueryAllVoteResponse)(nil), "r3l.r3l.v1beta1.QueryAllVoteResponse")
}

func init() { proto.RegisterFile("r3l/v1beta/querier.proto", fileDescriptor_bc3e27884096409a) }

var fileDescriptor_bc3e27884096409a = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xae, 0x19, 0xe3, 0xc7, 0x1b, 0x08, 0xc9, 0x30, 0x94, 0x05, 0x11, 0x4d, 0x13, 0x1b, 0xa3,
	0x30, 0x47, 0x6d, 0x8f, 0x48, 0x48, 0x70, 0x60, 0x27, 0x10, 0x74, 0xd2, 0x24, 0x90, 0x40, 0x72,
	0x22, 0xab, 0x8b, 0x48, 0xe2, 0xcc, 0x76, 0x2a, 0xfa, 0x37, 0x20, 0x24, 0xf8, 0x13, 0x38, 0xf0,
	0xbf, 0x70, 0xdc, 0x91, 0x23, 0x6a, 0xff, 0x11, 0x14, 0xc7, 0x69, 0xdc, 0xae, 0x55, 0x7b, 0xc8,
	0xa1, 0x3d, 0xf8, 0x7d, 0xdf, 0x7b, 0xdf, 0xf7, 0xe5, 0xd9, 0xe0, 0x88, 0x5e, 0xec, 0x0f, 0x3b,
	0x01, 0x53, 0xd4, 0x3f, 0xcf, 0x99, 0x88, 0x98, 0x20, 0x99, 0xe0, 0x8a, 0xe3, 0x3b, 0xa2, 0x17,
	0x93, 0xe2, 0x57, 0x56, 0x3b, 0x6e, 0x3b, 0xe4, 0x32, 0xe1, 0xd2, 0x0f, 0xa8, 0x64, 0x1a, 0x3b,
	0x32, 0xc4, 0x8e, 0x9f, 0xd1, 0x41, 0x94, 0x52, 0x15, 0xf1, 0xb4, 0x24, 0xbb, 0x0f, 0xac, 0xb6,
	0x82, 0xa6, 0x5f, 0x4e, 0x78, 0x2e, 0x42, 0x66, 0x8a, 0xae, 0x55, 0x4c, 0x69, 0xc2, 0x64, 0x46,
	0xa7, 0xb5, 0xfb, 0x56, 0x4d, 0x86, 0x5c, 0x54, 0xe7, 0xdb, 0xd6, 0xf9, 0x90, 0x2b, 0x73, 0xbc,
	0x17, 0xc2, 0xce, 0xfb, 0x42, 0xc9, 0xcb, 0x38, 0xee, 0x4f, 0xc7, 0xf4, 0xd9, 0x79, 0xce, 0xa4,
	0xc2, 0xaf, 0x01, 0x6a, 0x61, 0x0e, 0xda, 0x45, 0x87, 0x5b, 0xdd, 0x03, 0x52, 0xba, 0x20, 0x85,
	0x0b, 0xa2, 0x5d, 0x54, 0x06, 0xc9, 0x3b, 0x3a, 0xa8, 0xb8, 0x7d, 0x8b, 0xb9, 0xf7, 0x1b, 0x81,
	0xbb, 0x68, 0x8a, 0xcc, 0x78, 0x2a, 0x19, 0x7e, 0x01, 0x50, 0x5b, 0x74, 0xd0, 0xee, 0xc6, 0xe1,
	0x56, 0xd7, 0x23, 0x73, 0xe9, 0x91, 0x37, 0x72, 0x60, 0x71, 0x2d, 0x06, 0x3e, 0x9e, 0x91, 0x79,
	0x45, 0xcb, 0x7c, 0xbc, 0x52, 0x66, 0x39, 0x7c, 0x46, 0x67, 0x00, 0x4e, 0x25, 0xf3, 0x6d, 0x15,
	0x6b, 0xd3, 0x59, 0xfc, 0x42, 0x75, 0xe2, 0xd6, 0x10, 0x13, 0xc5, 0x73, 0xb8, 0x39, 0xfd, 0xa0,
	0x26, 0x89, 0x87, 0x8b, 0x92, 0xa8, 0x99, 0x35, 0xbe, 0xb9, 0x1c, 0x3e, 0xc3, 0xbd, 0x4a, 0xe2,
	0x49, 0xb1, 0x42, 0x4d, 0x67, 0xf0, 0x13, 0xc1, 0xf6, 0xdc, 0x00, 0xe3, 0xdf, 0x87, 0x4d, 0xbd,
	0xb4, 0xc6, 0xfb, 0xce, 0x22, 0xef, 0x25, 0xa3, 0xc4, 0x35, 0xe7, 0xf9, 0x13, 0xdc, 0xad, 0x24,
	0x9d, 0x72, 0xd5, 0xb8, 0xe5, 0xef, 0xa8, 0xce, 0xb4, 0xec, 0x6f, 0x1c, 0x3f, 0x83, 0xab, 0xc5,
	0x75, 0x34, 0x86, 0x9d, 0x45, 0x86, 0x35, 0x5e, 0xa3, 0x1a, 0xb3, 0xdb, 0xfd, 0xb6, 0x01, 0x9b,
	0x5a, 0x0f, 0x3e, 0x83, 0xdb, 0x33, 0xd7, 0x12, 0xb7, 0x2f, 0x69, 0x58, 0xfa, 0x42, 0xb8, 0x4f,
	0xd7, 0xc2, 0x1a, 0xab, 0x0c, 0x6e, 0xd9, 0x4b, 0x8f, 0x9f, 0x2c, 0x25, 0xcf, 0xdf, 0x3e, 0xb7,
	0xbd, 0x0e, 0xd4, 0x8c, 0xf9, 0x00, 0x37, 0xaa, 0xbd, 0xc2, 0xfb, 0x4b, 0x79, 0xf6, 0x62, 0xbb,
	0x07, 0xab, 0x60, 0xa6, 0xf5, 0x29, 0x5c, 0x37, 0xdf, 0x0f, 0x3f, 0x5a, 0x4a, 0xb1, 0xd6, 0xc7,
	0xdd, 0x5f, 0x81, 0x2a, 0xfb, 0xbe, 0x3a, 0xfe, 0x33, 0xf6, 0xd0, 0xc5, 0xd8, 0x43, 0xff, 0xc6,
	0x1e, 0xfa, 0x31, 0xf1, 0x5a, 0x17, 0x13, 0xaf, 0xf5, 0x77, 0xe2, 0xb5, 0x3e, 0x1e, 0x0d, 0x22,
	0x75, 0x96, 0x07, 0x24, 0xe4, 0x89, 0x2f, 0x58, 0xcc, 0x86, 0x34, 0x55, 0x47, 0x21, 0x4f, 0x92,
	0x3c, 0x8d, 0xd4, 0xc8, 0x2f, 0x1e, 0xf5, 0xaf, 0xfa, 0x5f, 0x8d, 0x32, 0x26, 0x83, 0x6b, 0xfa,
	0x55, 0xef, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xb2, 0xf5, 0xd2, 0x96, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	AllRankSource(ctx context.Context, in *QueryAllRankSourceRequest, opts ...grpc.CallOption) (*QueryAllRankSourceResponse, error)
	AllNamespace(ctx context.Context, in *QueryAllNamespaceRequest, opts ...grpc.CallOption) (*QueryAllNamespaceResponse, error)
	AllScore(ctx context.Context, in *QueryAllScoreRequest, opts ...grpc.CallOption) (*QueryAllScoreResponse, error)
	AllVote(ctx context.Context, in *QueryAllVoteRequest, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllRankSource(ctx context.Context, in *QueryAllRankSourceRequest, opts ...grpc.CallOption) (*QueryAllRankSourceResponse, error) {
	out := new(QueryAllRankSourceResponse)
	err := c.cc.Invoke(ctx, "/r3l.r3l.v1beta1.Query/AllRankSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllNamespace(ctx context.Context, in *QueryAllNamespaceRequest, opts ...grpc.CallOption) (*QueryAllNamespaceResponse, error) {
	out := new(QueryAllNamespaceResponse)
	err := c.cc.Invoke(ctx, "/r3l.r3l.v1beta1.Query/AllNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllScore(ctx context.Context, in *QueryAllScoreRequest, opts ...grpc.CallOption) (*QueryAllScoreResponse, error) {
	out := new(QueryAllScoreResponse)
	err := c.cc.Invoke(ctx, "/r3l.r3l.v1beta1.Query/AllScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllVote(ctx context.Context, in *QueryAllVoteRequest, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/r3l.r3l.v1beta1.Query/AllVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	AllRankSource(context.Context, *QueryAllRankSourceRequest) (*QueryAllRankSourceResponse, error)
	AllNamespace(context.Context, *QueryAllNamespaceRequest) (*QueryAllNamespaceResponse, error)
	AllScore(context.Context, *QueryAllScoreRequest) (*QueryAllScoreResponse, error)
	AllVote(context.Context, *QueryAllVoteRequest) (*QueryAllVoteResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllRankSource(ctx context.Context, req *QueryAllRankSourceRequest) (*QueryAllRankSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRankSource not implemented")
}
func (*UnimplementedQueryServer) AllNamespace(ctx context.Context, req *QueryAllNamespaceRequest) (*QueryAllNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllNamespace not implemented")
}
func (*UnimplementedQueryServer) AllScore(ctx context.Context, req *QueryAllScoreRequest) (*QueryAllScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllScore not implemented")
}
func (*UnimplementedQueryServer) AllVote(ctx context.Context, req *QueryAllVoteRequest) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllVote not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllRankSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRankSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllRankSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/r3l.r3l.v1beta1.Query/AllRankSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllRankSource(ctx, req.(*QueryAllRankSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/r3l.r3l.v1beta1.Query/AllNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllNamespace(ctx, req.(*QueryAllNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/r3l.r3l.v1beta1.Query/AllScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllScore(ctx, req.(*QueryAllScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/r3l.r3l.v1beta1.Query/AllVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllVote(ctx, req.(*QueryAllVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "r3l.r3l.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllRankSource",
			Handler:    _Query_AllRankSource_Handler,
		},
		{
			MethodName: "AllNamespace",
			Handler:    _Query_AllNamespace_Handler,
		},
		{
			MethodName: "AllScore",
			Handler:    _Query_AllScore_Handler,
		},
		{
			MethodName: "AllVote",
			Handler:    _Query_AllVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "r3l/v1beta/querier.proto",
}

func (m *QueryAllRankSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRankSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRankSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRankSourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRankSourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRankSourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RankSource) > 0 {
		for iNdEx := len(m.RankSource) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankSource[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		for iNdEx := len(m.Namespace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Namespace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Score) > 0 {
		for iNdEx := len(m.Score) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Score[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vote) > 0 {
		for iNdEx := len(m.Vote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllRankSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllRankSourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RankSource) > 0 {
		for _, e := range m.RankSource {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		for _, e := range m.Namespace {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Score) > 0 {
		for _, e := range m.Score {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vote) > 0 {
		for _, e := range m.Vote {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllRankSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRankSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRankSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRankSourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRankSourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRankSourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankSource = append(m.RankSource, &MsgRankSource{})
			if err := m.RankSource[len(m.RankSource)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = append(m.Namespace, &MsgNamespace{})
			if err := m.Namespace[len(m.Namespace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = append(m.Score, &MsgScore{})
			if err := m.Score[len(m.Score)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = append(m.Vote, &MsgVote{})
			if err := m.Vote[len(m.Vote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
