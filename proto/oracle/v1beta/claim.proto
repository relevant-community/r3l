syntax = "proto3";
package r3l.oracle.v1beta1;

option go_package            = "github.com/relevant-community/r3l/x/oracle/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the clim Msg service.
service Msg {
  // SubmitEvidence submits an arbitrary Evidence of misbehavior such as equivocation or
  // counterfactual signing.
  rpc CreateClaim(MsgCreateClaim) returns (MsgCreateClaimResponse);
}


// MsgCreateClaim represents a message that supports submitting an arbitrary
// oracle Claim.
message MsgCreateClaim {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string              submitter = 1;
  google.protobuf.Any claim  = 2 [(cosmos_proto.accepts_interface) = "Claim"];
}

// MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
message MsgCreateClaimResponse {
  // hash defines the hash of the evidence.
  bytes hash = 4;
}

// TestClaim is a concrete Claim type we use for testing
message TestClaim {
  int64 blockHeight = 1;
  string claimType = 2;
  string content = 3;
}