syntax = "proto3";
package r3l.oracle.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/relevant-community/r3l/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2
	rpc AllClaim(QueryAllClaimRequest) returns (QueryAllClaimResponse){
    option (google.api.http).get = "/r3l/oracle/v1beta1/claim/{claim_hash}";
  };
  // Evidence queries evidence based on evidence hash.
  rpc Claim(QueryClaimRequest) returns (QueryClaimResponse){
    option (google.api.http).get = "/r3l/oracle/v1beta1/claim";
  };
}

message QueryClaimRequest {
  bytes claim_hash = 1 [(gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes"];
}

// QueryClaimResponse is the response type for the Query/Claim RPC method.
message QueryClaimResponse {
  // claim returns the requested evidence.
  google.protobuf.Any claim = 1;
}

// this line is used by starport scaffolding # 3
message QueryAllClaimRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllClaimResponse {
	repeated google.protobuf.Any claim = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
