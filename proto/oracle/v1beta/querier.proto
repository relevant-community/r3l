syntax = "proto3";
package r3l.oracle.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "oracle/v1beta/params.proto";
import "oracle/v1beta/vote.proto";
import "cosmos_proto/cosmos.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/relevant-community/r3l/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of othe racle module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/r3l/oracle/v1beta1/params";
  }

  // PendingRounds queries the pending Rounds of the oracle module
  rpc PendingRounds(QueryPendingRoundsRequest) returns (QueryPendingRoundsResponse) {
    option (google.api.http).get = "/r3l/oracle/v1beta1/pending_rounds";
  }

  // Vote queries the parameters of the oracle module
  rpc Round(QueryRoundRequest) returns (QueryRoundResponse) {
    option (google.api.http).get = "/r3l/oracle/v1beta1/pending_rounds";
  }

  // Votes queries the parameters of the oracle module
  rpc AllRounds(QueryAllRoundsRequest) returns (QueryAllRoundsResponse) {
    option (google.api.http).get = "/r3l/oracle/v1beta1/pending_rounds";
  }

  // AllClaims queries all claims with pagination.
	rpc AllClaims(QueryAllClaimsRequest) returns (QueryAllClaimsResponse){
    option (google.api.http).get = "/r3l/oracle/v1beta1/allclaims";
  };

  // Claim queries claims based on claim hash.
  rpc Claim(QueryClaimRequest) returns (QueryClaimResponse){
    option (google.api.http).get = "/r3l/oracle/v1beta1/claim/{claim_hash}";
  };
}

// QueryRoundResponse is the request type for the Query/Params RPC method
message QueryRoundRequest {
  string claimType = 1;
  uint64 roundId = 2;
}

// QueryRoundResponse is the response type for the Query/Params RPC method
message QueryRoundResponse {
  Round round = 1 [(gogoproto.nullable) = false];
}



// QueryAllRoundsRequest is the request type for the Query/Params RPC method
message QueryAllRoundsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllRoundsResponse is the response type for the Query/Params RPC method
message QueryAllRoundsResponse {
  repeated Round rounds = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}



// QueryPendingRoundsRequest is the request type for the Query/Params RPC method
message QueryPendingRoundsRequest {
  string claimType = 1;
}

// QueryParamsResponse is the response type for the Query/Params RPC method
message QueryPendingRoundsResponse {
  repeated uint64 pending_rounds = 1 [(gogoproto.nullable) = false];
}



// QueryParamsRequest is the request type for the Query/Params RPC method
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}



// QueryClaimRequest is the request type for the Query/Claim RPC method
message QueryClaimRequest {
  bytes claim_hash = 1 [(gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes"];
}

// QueryClaimResponse is the response type for the Query/Claim RPC method.
message QueryClaimResponse {
  // claim returns the requested claim.
  google.protobuf.Any claim = 1 [(cosmos_proto.accepts_interface) = "Claim"];
}



// this line is used by starport scaffolding # 3

// QueryAllClaimsRequest is the request type for the Query/AllClaims RPC method
message QueryAllClaimsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllClaimsResponse is the response type for the Query/Claims RPC method.
message QueryAllClaimsResponse {
	repeated google.protobuf.Any claims = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
